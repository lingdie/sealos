// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: lvm_monitor.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LVMMonitorService_GetThinPoolMetrics_FullMethodName = "/lvmmonitor.LVMMonitorService/GetThinPoolMetrics"
	LVMMonitorService_GetThinPoolStats_FullMethodName   = "/lvmmonitor.LVMMonitorService/GetThinPoolStats"
	LVMMonitorService_GetVolumeGroupInfo_FullMethodName = "/lvmmonitor.LVMMonitorService/GetVolumeGroupInfo"
	LVMMonitorService_HealthCheck_FullMethodName        = "/lvmmonitor.LVMMonitorService/HealthCheck"
)

// LVMMonitorServiceClient is the client API for LVMMonitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LVMMonitorServiceClient interface {
	// get thin pool metrics
	GetThinPoolMetrics(ctx context.Context, in *GetThinPoolMetricsRequest, opts ...grpc.CallOption) (*GetThinPoolMetricsResponse, error)
	// get thin pool stats
	GetThinPoolStats(ctx context.Context, in *GetThinPoolStatsRequest, opts ...grpc.CallOption) (*GetThinPoolStatsResponse, error)
	// get VG info
	GetVolumeGroupInfo(ctx context.Context, in *GetVolumeGroupInfoRequest, opts ...grpc.CallOption) (*GetVolumeGroupInfoResponse, error)
	// healthy check
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type lVMMonitorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLVMMonitorServiceClient(cc grpc.ClientConnInterface) LVMMonitorServiceClient {
	return &lVMMonitorServiceClient{cc}
}

func (c *lVMMonitorServiceClient) GetThinPoolMetrics(ctx context.Context, in *GetThinPoolMetricsRequest, opts ...grpc.CallOption) (*GetThinPoolMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetThinPoolMetricsResponse)
	err := c.cc.Invoke(ctx, LVMMonitorService_GetThinPoolMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lVMMonitorServiceClient) GetThinPoolStats(ctx context.Context, in *GetThinPoolStatsRequest, opts ...grpc.CallOption) (*GetThinPoolStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetThinPoolStatsResponse)
	err := c.cc.Invoke(ctx, LVMMonitorService_GetThinPoolStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lVMMonitorServiceClient) GetVolumeGroupInfo(ctx context.Context, in *GetVolumeGroupInfoRequest, opts ...grpc.CallOption) (*GetVolumeGroupInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVolumeGroupInfoResponse)
	err := c.cc.Invoke(ctx, LVMMonitorService_GetVolumeGroupInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lVMMonitorServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, LVMMonitorService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LVMMonitorServiceServer is the server API for LVMMonitorService service.
// All implementations must embed UnimplementedLVMMonitorServiceServer
// for forward compatibility.
type LVMMonitorServiceServer interface {
	// get thin pool metrics
	GetThinPoolMetrics(context.Context, *GetThinPoolMetricsRequest) (*GetThinPoolMetricsResponse, error)
	// get thin pool stats
	GetThinPoolStats(context.Context, *GetThinPoolStatsRequest) (*GetThinPoolStatsResponse, error)
	// get VG info
	GetVolumeGroupInfo(context.Context, *GetVolumeGroupInfoRequest) (*GetVolumeGroupInfoResponse, error)
	// healthy check
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedLVMMonitorServiceServer()
}

// UnimplementedLVMMonitorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLVMMonitorServiceServer struct{}

func (UnimplementedLVMMonitorServiceServer) GetThinPoolMetrics(context.Context, *GetThinPoolMetricsRequest) (*GetThinPoolMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThinPoolMetrics not implemented")
}
func (UnimplementedLVMMonitorServiceServer) GetThinPoolStats(context.Context, *GetThinPoolStatsRequest) (*GetThinPoolStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThinPoolStats not implemented")
}
func (UnimplementedLVMMonitorServiceServer) GetVolumeGroupInfo(context.Context, *GetVolumeGroupInfoRequest) (*GetVolumeGroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolumeGroupInfo not implemented")
}
func (UnimplementedLVMMonitorServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedLVMMonitorServiceServer) mustEmbedUnimplementedLVMMonitorServiceServer() {}
func (UnimplementedLVMMonitorServiceServer) testEmbeddedByValue()                           {}

// UnsafeLVMMonitorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LVMMonitorServiceServer will
// result in compilation errors.
type UnsafeLVMMonitorServiceServer interface {
	mustEmbedUnimplementedLVMMonitorServiceServer()
}

func RegisterLVMMonitorServiceServer(s grpc.ServiceRegistrar, srv LVMMonitorServiceServer) {
	// If the following call pancis, it indicates UnimplementedLVMMonitorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LVMMonitorService_ServiceDesc, srv)
}

func _LVMMonitorService_GetThinPoolMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThinPoolMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LVMMonitorServiceServer).GetThinPoolMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LVMMonitorService_GetThinPoolMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LVMMonitorServiceServer).GetThinPoolMetrics(ctx, req.(*GetThinPoolMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LVMMonitorService_GetThinPoolStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThinPoolStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LVMMonitorServiceServer).GetThinPoolStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LVMMonitorService_GetThinPoolStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LVMMonitorServiceServer).GetThinPoolStats(ctx, req.(*GetThinPoolStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LVMMonitorService_GetVolumeGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolumeGroupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LVMMonitorServiceServer).GetVolumeGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LVMMonitorService_GetVolumeGroupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LVMMonitorServiceServer).GetVolumeGroupInfo(ctx, req.(*GetVolumeGroupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LVMMonitorService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LVMMonitorServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LVMMonitorService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LVMMonitorServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LVMMonitorService_ServiceDesc is the grpc.ServiceDesc for LVMMonitorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LVMMonitorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lvmmonitor.LVMMonitorService",
	HandlerType: (*LVMMonitorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetThinPoolMetrics",
			Handler:    _LVMMonitorService_GetThinPoolMetrics_Handler,
		},
		{
			MethodName: "GetThinPoolStats",
			Handler:    _LVMMonitorService_GetThinPoolStats_Handler,
		},
		{
			MethodName: "GetVolumeGroupInfo",
			Handler:    _LVMMonitorService_GetVolumeGroupInfo_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _LVMMonitorService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lvm_monitor.proto",
}
